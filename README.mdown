DOM transport via JSON (DOMj)
========================================================================================

This proposes a standard for describing the Document Object Model using Javascript Objects. Typically the DOM is described in HTML, however in a javascript based application, HTML is sub-optimal with regard to generation and transformation, typically requiring a templating solution. In addition a Javascript Object based syntax can represent data which is impossible or less precise than text, such as dates, functions and [Files](https://developer.mozilla.org/en/DOM/File).

DOMj can be generated and transformed in browsers, on the server and be transported over networks.

Example
-------

Basic Example

    { tag: "DIV", id: "header", cls: "page-header" }
    
produces equivalent DOM to the following html ```<DIV id="header" class="page-header"></DIV>```

Levels
------

DOMj has two levels; CORE and LIVE

* `CORE` specifies a set of functionality similar to HTML and is appropriate for serialisation in strict JSON
* `LIVE` specified an extended set of functionality suitable for use in runtime environments and encoding in javascript source files.

* All DOMj specifies a subset of [valid ecmaScript](http://www.ecma-international.org/publications/standards/Ecma-262.htm).
* DOMj-CORE _can be_ encoded in [JSON](http://json.org/) for serialisation, storage and transport
* DOMj-LIVE includes _all_ CORE functionlity

Syntax
------

* DOM elements are represented by a simple javascript object `{ }`
* DOM properties are represented by a name value pair in the object. For example;
	* `id: "foo"`
	* `href: "http://github.com/"`
	* `disabled: true`
* Any object which inherits from the [HTMLElement](http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-882764350) can be created
* Any property on any object which has a setter can be represented
* Several names are reserved and provide additional features
	* `tag` accepts a string and sets the element tagName when the element is created ( required )
	* `children` accepts an array and represents the child nodes of the element
	* `text` accepts a string and creates a single child TextNode
	* `dataset` accepts an object of name/value pairs that sets custom data attributes of the element
	* `style` accepts an object of name/value pairs that sets style properties of the element
	* `on(name)` accepts a function and allows an event handler to be bound to the `name` event. The event is bound to the bubbling phase

Note that `children`, `text` and `innerHTML` all set the children of the node and only one can be defined per node.


Environment
-----------

DOMj-CORE can be used on the server side, to create an object which would be delivered to a browser for rendering ( rather than sending HTML )

DOMj-LIVE can be used in the browser as an intermediate data type, rather than using a text only (html) templating engine

DOMj produces DOM directly without passing through text based markup, so can be used in ```HTML```, ```XHTML```, ```SVG``` and ```XML``` documents. It can also be used in mixed environments, for example, creating SVG elements inside an HTML document.

DOMj does not need distinguish between self-closing tags and tags with empty bodies, as there are no distinction in DOM.

DOMj does not need to consider the encoding type of the underlying document, only the encoding type of the source


Property Specifics
==================

The ```tag``` Property
----------------------

* Sets the tagName of the element.
* Is required for top level object, for children it is optional, the default value is 'DIV'.
* In XML documents this attribute is case sensitive
* Uppercase is recommended in non-case sensitive documents
* Must follow the rules for [XML Names](http://www.w3.org/TR/REC-xml/#NT-Name).
	* In addition, The colon character (```:```) is not allowed (reserved for future support of namespaces)

Usage:

    { tag: "DIV" }
    
DOM Interface:

    document.createElement( _tag_ );

Setting Properties
------------------

* Set properties on an element
* Property must exist for that element class and must have a setter
* Property value must be of the appropriate type the property, or convertible to the appropriate type

Usage:

    { tag: "INPUT", type: "date", id: "the_id", valueAsDate: Date.now(), diabled: true } 

DOM Interface

    el[ _property_ ] = _value_

The `text` property
--------------------

* defines a single child TextNode for an element
* can not be used with ```children``` or ```innerHTML```
* html escaping of text is not required and html entities are not allowed
* special characters should be specified using javascript text escapes and unicode code points eg. "\n" (newline) or "\u2122" (trademark symbol)
* Is not effected by the encoding format of the document  

Usage:

    { tag: "B", text: "Some Bold Text" }

Dom Interface:

    var text = document.createTextNode( _text_ );
    el.appendChild( text );
    

The ```children``` property
-------------------

* defines children elements of a parent element
* Optional
* Accepts an array of objects
* objects may be
	* null ( nothing is added - this is a noop )
	* string ( adds a TextNode 
	
Usage:

    { tag: "UL", children: [
        { tag: "LI", text: "Orange" },
        { tag: "LI", text: "Lemon" },
        { tag: "LI", text: "Lime" }
    ] }

    { tag: "P", children: [
        "Hey, check out this ",
        { tag: "A", href: "info.html", text: "link" },
        " for more information.",
        { tag: "BR" }
    ] }

DOM Interface:

    for( i = 0; i < _children_.length; i++ ) {
      _childNode_ = _create_child_node_( _children_[i] );
      el.appendChild( _childNode_ )
    }

The ```dataset``` Property
-----------------------


etc...


WIP
===



Formal Syntax Description
---------------------------

_domTree_
> `{` _properties_ `}`

_properties_
> _property_  
> _property_ `,` _properties_

_property_
> _propertyName_ `:` _propertyValue  
> `tag` `:` _string_  
> `children` `:` _childrenArray_  
> `text` `:` _string_  
> `dataset` `:` _object_  
> `style` `:` _object_  
> `on` _string_ `:` _function_

_propertyValue_
> _nativeObject_  
> _object_  
> _array_  
> _string_  
> _function_  
> `true`  
> `false`  
> `null`  

_childrenArray_
> `[ ]`  
> `[ _members_ ]`  

_members_
> _member_  
> _member_ `,` _members_

_member_
> `null`  
> _string_  
> _domTree_  
> _nativeObject_



