DOM transport via JSON (DOMj)
========================================================================================

This proposes a standard for describing the Document Object Model using Javascript Objects. Typically the DOM is described in HTML, however in a javascript based application, HTML is sub-optimal with regard to generation and transformation, typically requiring a templating solution. In addition a Javascript Object based syntax can represent data which is impossible or less precise than text.

DOMj can be generated and transformed in browsers, on the server and be transported over networks.

Syntax
------

Basic Example

    { tag: "DIV", id: "header", cls: "page-header" }
    
produces equivalent DOM to the following html ```<DIV id="header" class="page-header"></DIV>```

* DOMj specifies a subset of [valid ecmaScript](http://www.ecma-international.org/publications/standards/Ecma-262.htm).
* DOMj embedded in source code does not need to be strict [JSON](http://json.org/).
* DOMj _can be_ encoded in strict JSON for serialisation

Environment
-----------

DOMj can be used on the server side, to create an object which would be delivered to a browser for rendering ( rather than sending HTML )

DOMj can be used directly in the browser as an intermediate data type, rather than using a text only (html) templating engine

DOMj produces DOM directly without passing through text based markup, so can be used in ```HTML```, ```XHTML```, ```SVG``` and ```XML``` documents. It can also be used in mixed environments, for example, creating SVG elements inside an HTML document.

DOMj does need distinguish between self-closing tags and tags with empty bodies, as there are no distinction in DOM.

DOMj does not need to consider the encoding type of the underlying document, only the encoding type of the source

The following represents the minimum features for a compliant implementation

* a DOM element is represented by a simple javascript object ```{ }```
* a DOM attribute is represented by a name value pair in the object ```title="Html element node"```
* Several names are reserved and provide additional features
	* ```tag``` accepts a string and sets the element tagName
	* ```id``` accepts a string and sets the element id
	* ```cls``` accepts a space separated token string and sets the element className
	* ```children``` accepts an array and represents the child nodes of the element
	* ```text``` accepts a string and creates a single child TextNode
	* ```data``` accepts an object of name/value pairs that sets custom data attributes of the element
	* ```html``` accepts a string of arbitrary html data that is passed to the innerHTML property
	* ```css``` accepts an object of name/value pairs that sets css properties of the element
	* ```on(name)``` accepts a function and allows an event handler to be bound to the ```name``` event. The event is bound to the bubbling phase

Note that ```children```, ```text``` and ```html``` all set the children of the node and only one can be defined per node.

```tag``` Attribute
-------------

* Sets the tagName of the element.
* Is required for top level object, for children it is optional, the default value is 'DIV'.
* In XML documents this attribute is case sensitive
* Uppercase is recommended in non-case sensitive documents
* Must follow the rules for [XML Names](http://www.w3.org/TR/REC-xml/#NT-Name).
	* In addition, The colon character (```:```) is not allowed (reserved for future support of namespaces)

Usage:

    { tag: "DIV" }
    
DOM Interface:

    document.createElement( _tag_ );

```id``` Attribute
------------------

* Sets the ```id``` property of the element
* Optional

Usage:

    { tag: "DIV", id: "header" }

DOM Interface:

    var el = document.createElement('DIV');
    el.id = _id_;

```cls``` Attribute
-------------------

* Sets the ```className``` property of the element
* Optional
* Can be used to set multiple classes (space separated)

Usage:

    { tag: "BLOCKQUOTE", cls: "deep-inset blue" }

DOM Interface:

    var el = document.createElement('DIV');
    el.className = _cls_;

```text``` Attribute
--------------------

* defines a single child TextNode for an element
* can not be used with ```children``` or ```html```
* html escaping of text is not required and html entities are not allowed
* special characters should be specified using javascript text escapes and unicode code points eg. "\n" (newline) or "\u2122" (trademark symbol)
* Is not effected by the encoding format of the document  

Usage:

    { tag: "B", text: "Some Bold Text" }

Dom Interface:

    var text = document.createTextNode( _text_ );
    el.appendChild( text );
    

```children``` Attribute
-------------------

* defines children elements of a parent element
* Optional
* Accepts an array of objects

Usage:

    { tag: "UL", children: [
        { tag: "LI", text: "Orange" },
        { tag: "LI", text: "Lemon" },
        { tag: "LI", text: "Lime" }
    ] }

DOM Interface:

    for( i = 0; i < _children_.length; i++ ) {
      el = _create_child_node_( _children_[i] );
      el.appendTo( _parent_ )
    }

```data``` Attribute
--------------------


etc...
